File Read 후 Linq로 

Split vs Regex Split 성능 비교

첫줄만 패턴 감지해서 자동으로 순번 체크 후 split는 그다음


서버
  ㄴ web
      ㄴ nginx1
      ㄴ nginx2
  ㄴ was
      ㄴ tomcat1


https://www.measurethat.net/Benchmarks/Show/4781/0/split-vs-regex
https://stackoverflow.com/questions/3601465/string-split-vs-regex-split
https://httpd.apache.org/docs/2.4/ko/logs.html
https://naver.me/5ITV5F9S


Apache Access Log format
https://httpd.apache.org/docs/2.4/ko/logs.html
regular pattern example
IP(n)	(.*)	140.206.89.64, 211.95.78.82, 14.0.68.221 14.0.68.221
DATE(Common)	\[(\d{2}/\w{3}/\d{4}):(\d{2}:\d{2}:\d{2}) ([+\-]\d{4})\]	[09/Apr/2014:23:02:18 +0900]
DATE	(\d{2}/\w{3}/\d{4}):(\d{2}:\d{2}:\d{2})	09/Apr/2014:23:02:18
DATE-A	(\d{4}-\d{2}-\d{2})	2001-06-10
DATE-B	(\d{4}.\d{2}.\d{2})	2001.06.10
DATE-C	(\d{4}/\d{2}/\d{2})	2001/06/10
DATE-D	(\d{2}/\w{3}/\d{4})	09/Apr/2014
TIME	(\d{2}:\d{2}:\d{2})	12:00:05
Method	(POST|GET|HEAD|TRACE|PUT|DELETE|OPTION|CONNECT)	GET
URL	(.*)	/abc.jsp?ab=
Protocol	(.+?)	HTTP/1.1
STATUS	(\d+)	200
ResByte	(-|\d+)	12121 or -
ResTime(Microsecond)	(\d+)	1213134
ResTime(ms)	(\d+)([a-z]+)	212ms
Any	(.*)	Mozilla/4.0 (compatible; MSIE 8.0; ~~~
-	\-	-
"	"	"
IP

largefile 핸들링
https://stackoverflow.com/questions/17188357/read-large-txt-file-multithreaded
var inputLines = new BlockingCollection<string>();
ConcurrentDictionary<int, int> catalog = new ConcurrentDictionary<int, int>();

var readLines = Task.Factory.StartNew(() =>
{
    foreach (var line in File.ReadLines(catalogPath)) 
        inputLines.Add(line);

        inputLines.CompleteAdding(); 
});

var processLines = Task.Factory.StartNew(() =>
{
    Parallel.ForEach(inputLines.GetConsumingEnumerable(), line =>
    {
        string[] lineFields = line.Split('\t');
        int genomicId = int.Parse(lineFields[3]);
        int taxId = int.Parse(lineFields[0]);
        catalog.TryAdd(genomicId, taxId);   
    });
});

Task.WaitAll(readLines, processLines);



https://stackoverflow.com/questions/21136753/read-a-very-large-file-by-chunks-and-not-line-by-line
const int MAX_BUFFER = 33554432; //32MB
byte[] buffer = new byte[MAX_BUFFER];
int bytesRead;
StringBuilder currentLine = new StringBuilder();

using (FileStream fs = File.Open(filePath, FileMode.Open, FileAccess.Read))
using (BufferedStream bs = new BufferedStream(fs))
{
    string line;
    bool stop = false;
    var memoryStream = new MemoryStream(buffer);
    var stream = new StreamReader(memoryStream);
    while ((bytesRead = bs.Read(buffer, 0, MAX_BUFFER)) != 0)
    {
        memoryStream.Seek(0, SeekOrigin.Begin);

        while (!stream.EndOfStream)
        {
            line = ReadLineWithAccumulation(stream, currentLine);

            if (line != null)
            {
                //process line
            }
        }
    }
}

private string ReadLineWithAccumulation(StreamReader stream, StringBuilder currentLine)
{
    while (stream.Read(buffer, 0, 1) > 0)
    {
        if (charBuffer [0].Equals('\n'))
        {
            string result = currentLine.ToString();
            currentLine.Clear();

            if (result.Last() == '\r') //remove if newlines are single character
            {
                result = result.Substring(0, result.Length - 1);
            }

            return result;
        }
        else
        {
            currentLine.Append(charBuffer [0]);
        }
    }

    return null;  //line not complete yet
}

private char[] charBuffer = new char[1];





